@model IEnumerable<TicketGo.Application.DTOs.TrainRouteDto>

@{
    ViewData["Title"] = "Danh sách tuyến đường";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
    int i = 0;
}

<div class="flex items-center justify-center bg-gray-100 dark:bg-gray-900 p-4">
    <div class="w-full h-[80vh] flex flex-col bg-white dark:bg-gray-800 rounded-2xl shadow-xl overflow-hidden">
        <!-- Header -->
        <div class="flex-shrink-0 p-6 border-b border-gray-200 dark:border-gray-700">
            <div class="flex justify-between items-center">
                <h1 class="text-2xl font-bold text-gray-800 dark:text-white">Danh Sách Tuyến Đường</h1>
                <button id="createModalToggle" class="flex items-center px-4 py-2 bg-lime-400 text-white text-sm font-semibold rounded-lg hover:bg-lime-500 transition ml-8">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                    </svg>
                    Thêm Tuyến Đường
                </button>
            </div>
        </div>

        <!-- Scrollable Table -->
        <div class="flex-1 overflow-y-auto">
            <table class="min-w-full table-auto border-collapse">
                <thead class="sticky top-0 bg-gray-50 dark:bg-gray-800">
                    <tr class="text-left">
                        <th class="p-4 text-sm font-bold text-lime-400 cursor-pointer"><div class="flex items-center hover:font-extrabold">#</div></th>
                        <th class="p-4 text-sm font-bold text-lime-400 cursor-pointer"><div class="flex items-center hover:font-extrabold">Điểm Đi</div></th>
                        <th class="p-4 text-sm font-bold text-lime-400 cursor-pointer"><div class="flex items-center hover:font-extrabold">Điểm Đến</div></th>
                        <th class="p-4 text-sm font-bold text-lime-400"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr class="border-y dark:border-gray-700 hover:bg-gray-100 dark:hover:bg-gray-700">
                            <td class="p-4 text-sm text-gray-700 dark:text-white">@{ i++; } @i</td>
                            <td class="p-4 text-sm text-gray-700 dark:text-white">@Html.DisplayFor(modelItem => item.PointStart)</td>
                            <td class="p-4 text-sm text-sm text-gray-700 dark:text-white">@Html.DisplayFor(modelItem => item.PointEnd)</td>
                            <td class="p-4 flex space-x-2">
                                <button class="edit-btn flex items-center justify-center text-gray-600 dark:text-gray-300 hover:text-lime-400 dark:hover:text-lime-400 w-8 h-8 rounded-full hover:bg-navy-600" 
                                        data-id="@item.IdTrainRoute" 
                                        data-start="@item.PointStart" 
                                        data-end="@item.PointEnd" 
                                        title="Sửa">
                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                    </svg>
                                </button>
                                <button class="delete-btn flex items-center justify-center text-gray-600 dark:text-gray-300 hover:text-lime-400 dark:hover:text-lime-400 w-8 h-8 rounded-full hover:bg-navy-600" 
                                        data-id="@item.IdTrainRoute" 
                                        data-url="@Url.Action("Delete", "TrainRoutes", new { area = "Admin", id = item.IdTrainRoute })" 
                                        title="Xóa">
                                    <svg class="w-5 h-5 text-lime-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5-4h4M10 10v6m4-6v6M5 7h14"></path>
                                    </svg>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Create/Edit Modal -->
    <div id="createModal" class="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-50 hidden">
        <div class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-2xl p-6 w-full max-w-md max-h-[80vh] overflow-y-auto shadow-lg">
            <h2 id="modalTitle" class="text-xl font-bold text-gray-800 dark:text-white mb-4">Thêm Tuyến Đường Mới</h2>
            <form id="trainRouteForm" method="post">
                @Html.AntiForgeryToken()
                <input type="hidden" id="idTrainRoute" name="IdTrainRoute" />
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2" for="pointStart">Điểm Đi <span class="text-lime-400">*</span></label>
                    <div class="relative">
                        <input type="text" id="pointStart" name="PointStart" class="w-full pt-3 pb-3 pr-3 pl-10 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white focus:ring-2 focus:ring-lime-400" 
                               required minlength="2" pattern="[A-Za-zÀ-ỹ\s]+" title="Điểm đi chỉ chứa chữ cái và khoảng trắng" placeholder="Nhập điểm đi" />
                        <svg class="absolute left-3 top-1/3 -translate-y-1/2 w-5 h-5 text-lime-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                            <circle cx="12" cy="10" r="3"/>
                        </svg>
                    </div>
                    <p id="pointStartError" class="text-sm text-lime-400 mt-1 hidden"></p>
                    @if (ViewData.ModelState.ContainsKey("PointStart"))
                    {
                        <p class="text-sm text-lime-400 mt-1">@ViewData.ModelState["PointStart"]?.Errors.FirstOrDefault()?.ErrorMessage</p>
                    }
                </div>
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2" for="pointEnd">Điểm Đến <span class="text-lime-400">*</span></label>
                    <div class="relative">
                        <input type="text" id="pointEnd" name="PointEnd" class="w-full pt-3 pb-3 pr-3 pl-10 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white focus:ring-2 focus:ring-lime-400" 
                               required minlength="2" pattern="[A-Za-zÀ-ỹ\s]+" title="Điểm đến chỉ chứa chữ cái và khoảng trắng" placeholder="Nhập điểm đến" />
                        <svg class="absolute left-3 top-1/3 -translate-y-1/2 w-5 h-5 text-lime-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 21v-8l6-6 6 6v8M9 15v6"/>
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v3"/>
                        </svg>
                    </div>
                    <p id="pointEndError" class="text-sm text-lime-400 mt-1 hidden"></p>
                    @if (ViewData.ModelState.ContainsKey("PointEnd"))
                    {
                        <p class="text-sm text-lime-400 mt-1">@ViewData.ModelState["PointEnd"]?.Errors.FirstOrDefault()?.ErrorMessage</p>
                    }
                </div>
                <div class="flex justify-end space-x-2">
                    <button type="button" id="closeModal" class="px-4 py-2  text-white rounded-lg hover:bg-gray-600 transition">Hủy</button>
                    <button type="submit" id="submitButton" class="px-12 py-2 bg-lime-400 text-white rounded-lg hover:bg-lime-500 transition">Tạo</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div id="deleteModal" class="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-50 hidden">
        <div class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-2xl p-6 w-full max-w-sm shadow-lg">
            <h2 class="text-lg font-bold text-gray-800 dark:text-white mb-4">Xác Nhận Xóa</h2>
            <p class="text-sm text-gray-600 dark:text-gray-300 mb-6">Bạn có chắc muốn xóa tuyến đường này?</p>
            <form asp-action="Delete" asp-controller="TrainRoutes" asp-area="Admin" id="deleteForm" method="post">
                @Html.AntiForgeryToken()
                <input type="hidden" name="id" id="deleteId" />
                <div class="flex justify-end space-x-2">
                    <button type="button" id="cancelDelete" class="px-4 py-2  text-white rounded-lg hover:bg-gray-600 transition">Hủy</button>
                    <button type="submit" id="confirmDelete" class="px-4 py-2 bg-lime-400 text-white rounded-lg hover:bg-lime-500 transition">Xóa</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Cấu hình Toastr
        toastr.options = {
            positionClass: 'toast-bottom-right',
            progressBar: true,
            timeOut: 5000
        };

        // Hiển thị thông báo từ TempData
        const successMessage = '@TempData["SuccessMessage"]';
        if (successMessage) {
            toastr.success(successMessage);
        }

        // Modal Tạo/Chỉnh sửa
        const createModal = document.getElementById('createModal');
        const createModalToggle = document.getElementById('createModalToggle');
        const closeModal = document.getElementById('closeModal');
        const trainRouteForm = document.getElementById('trainRouteForm');
        const modalTitle = document.getElementById('modalTitle');
        const submitButton = document.getElementById('submitButton');
        const idTrainRoute = document.getElementById('idTrainRoute');
        const pointStart = document.getElementById('pointStart');
        const pointEnd = document.getElementById('pointEnd');

        createModalToggle.addEventListener('click', () => {
            resetModal('create');
            createModal.classList.toggle('hidden');
        });

        closeModal.addEventListener('click', resetModal);
        createModal.addEventListener('click', (e) => {
            if (e.target === createModal) resetModal();
        });

        function resetModal(mode = 'create') {
            createModal.classList.add('hidden');
            trainRouteForm.reset();
            document.getElementById('pointStartError').classList.add('hidden');
            document.getElementById('pointEndError').classList.add('hidden');
            idTrainRoute.value = '';
            if (mode === 'create') {
                modalTitle.textContent = 'Thêm Tuyến Đường Mới';
                submitButton.textContent = 'Tạo';
                trainRouteForm.action = '@Url.Action("Create", "TrainRoutes", new { area = "Admin" })';
            }
        }

        // Xác thực Form
        trainRouteForm.addEventListener('submit', (e) => {
            const pointStartError = document.getElementById('pointStartError');
            const pointEndError = document.getElementById('pointEndError');
            let isValid = true;

            pointStartError.classList.add('hidden');
            pointEndError.classList.add('hidden');

            if (!pointStart.value.match(/^[A-Za-zÀ-ỹ\s]+$/)) {
                pointStartError.textContent = 'Điểm đi chỉ chứa chữ cái và khoảng trắng';
                pointStartError.classList.remove('hidden');
                isValid = false;
            }
            if (!pointEnd.value.match(/^[A-Za-zÀ-ỹ\s]+$/)) {
                pointEndError.textContent = 'Điểm đến chỉ chứa chữ cái và khoảng trắng';
                pointEndError.classList.remove('hidden');
                isValid = false;
            }
            if (pointStart.value === pointEnd.value) {
                pointEndError.textContent = 'Điểm đi và điểm đến không được trùng nhau';
                pointEndError.classList.remove('hidden');
                isValid = false;
            }

            if (!isValid) e.preventDefault();
        });

        // Chỉnh sửa
        document.querySelectorAll('.edit-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                idTrainRoute.value = btn.dataset.id;
                pointStart.value = btn.dataset.start;
                pointEnd.value = btn.dataset.end;
                modalTitle.textContent = 'Chỉnh Sửa Tuyến Đường';
                submitButton.textContent = 'Sửa';
                trainRouteForm.action = '@Url.Action("Edit", "TrainRoutes", new { area = "Admin" })';
                createModal.classList.toggle('hidden');
            });
        });

        // Modal Xóa
        const deleteModal = document.getElementById('deleteModal');
        const cancelDelete = document.getElementById('cancelDelete');
        const confirmDelete = document.getElementById('confirmDelete');
        const deleteForm = document.getElementById('deleteForm');
        const deleteId = document.getElementById('deleteId');

        document.querySelectorAll('.delete-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.preventDefault();
                deleteId.value = btn.dataset.id;
                deleteForm.action = btn.dataset.url;
                deleteModal.classList.toggle('hidden');
            });
        });

        cancelDelete.addEventListener('click', resetDeleteModal);
        deleteModal.addEventListener('click', (e) => {
            if (e.target === deleteModal) resetDeleteModal();
        });

        function resetDeleteModal() {
            deleteModal.classList.add('hidden');
            deleteId.value = '';
            deleteForm.action = '';
        }

        confirmDelete.addEventListener('click', (e) => {
            e.preventDefault();
            if (deleteForm.action && deleteId.value) {
                deleteForm.submit();
            }
        });
    </script>
}